<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[iOS程序启动过程]]></title>
      <url>/2018/01/26/iOS%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<ul>
<li>点击程序图标打开程序</li>
<li>执行main函数</li>
<li>执行UIApplicationMain函数</li>
<li><p>通过UIApplicationMain方法的反射创建UIApplication对象设置代理，开启消息循环</p>
<ul>
<li><p>开启监听程序事件</p>
  <figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;<span class="comment">//程序加载完毕后调用该方法&#125;</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillResignActive:(<span class="built_in">UIApplication</span> *)application &#123;<span class="comment">//程序失去焦点调用该方法&#125;</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidEnterBackground:(<span class="built_in">UIApplication</span> *)application &#123;<span class="comment">//程序进入后台调用该方法&#125;</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillEnterForeground:(<span class="built_in">UIApplication</span> *)application &#123;<span class="comment">//程序从后台将要进入前台调用该方法&#125;</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidBecomeActive:(<span class="built_in">UIApplication</span> *)application &#123;<span class="comment">//内存经过，程序将要停止调用该方法&#125;</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillTerminate:(<span class="built_in">UIApplication</span> *)application &#123;<span class="comment">//程序将要退出调用该方法&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加载info.plist程序配置文件，主要是看我们用的是Storyboard方式加载还是代码的方式加载。</p>
<ul>
<li><p>通过storyboard方式加载</p>
<ul>
<li><p>在程序启动完成的时候系统自动创建一个UIWindow的实例来显示界面</p>
  <figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIWindow</span> *window;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置窗口的根控制器</p>
<ul>
<li>根据storyboard的设置，创建一个控制器。</li>
<li>并且设置这个控制器为之前创建的UIWindow的根控制器</li>
</ul>
</li>
<li>显示窗口。（makeKeyAndVisible）<ul>
<li>设置self.window可见并且设置UIApplication的keyWindow</li>
</ul>
</li>
</ul>
</li>
<li><p>通过代码加载</p>
<pre><code>    ```mm
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
self.window = [[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];
UIViewController *viewController = [[UIViewController alloc]init];
self.window.rootViewController = viewController;[self.window makeKeyAndVisible];
return YES;
}

    ```                    
</code></pre><ul>
<li>首先创建串口，获取到一个UIWindow实例来显示界面。（self.window为系统自带）</li>
<li>创建一个控制器，将该控制器设置为根控制器</li>
<li>显示窗口<code>[self.window makeKeyAndVisible]</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>结束程序</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac系统搭建基于GitHhub的Hexo博客]]></title>
      <url>/2018/01/23/Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHhub%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="1-注册GitHub帐号"><a href="#1-注册GitHub帐号" class="headerlink" title="1. 注册GitHub帐号"></a>1. 注册GitHub帐号</h3><ul>
<li>进入<a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>注册帐号</li>
<li>创建一个仓库，名称为 yourname.github.io 其中yourname是你的github名称,按照这个规则创建才有用。如你的github注册名称为jack那你创建的仓库名称为jack.github.io</li>
</ul>
<h3 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h3><ul>
<li>进入<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a>下载一步步安装即可,建议安装通用版。</li>
<li>安装完成后可以在终端测试 Node.js 和npm 是否可以使用了。</li>
<li>查看 Node.js 的版本号在终端里输入如下命令：<code>node -v</code> 如果Node.js 成功安装，可以看到类似如下的信息：v6.5.0。查看npm 的版本号在终端里输入如下命令：<code>npm -v</code>如果npm 成功安装，可以看到类似如下的信息：3.10.3。注意命令中间有空格。</li>
</ul>
<h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h3><ul>
<li>可以查看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></li>
<li>在终端输入 <code>npm install -g hexo-cli</code> 安装</li>
<li>如果Mac系统在安装过程中报错需要安装命令行工具</li>
<li>在终端中输入命令 <code>xcode-select --install</code>会弹出一个窗口选择安装即可。安装完成后输入命令 <code>gcc-v</code>会看到如下信息 <code>Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 8.0.0 (clang-800.0.38)
Target: x86_64-apple-darwin15.5.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</code>说明安装完成</li>
<li>安装完命令行工具后再输入 $ npm install -g hexo-cli 来安装Hexo，安装完成后输入 <code>hexo</code> 命令会出现下图<br>  <img src="/2018/01/23/Mac上搭建基于GitHhub的Hexo博客/Hexo安装完成图.png" alt="Hexo安装完成图"></li>
</ul>
<h3 id="4-初始化博客"><a href="#4-初始化博客" class="headerlink" title="4. 初始化博客"></a>4. 初始化博客</h3><ul>
<li>新建一个文件夹如我是在文档下新建了一个名称为blog的文件夹名字可以随便取在终端cd到该文件夹 <code>cd Documents/blog/</code> 然后运行 <code>hexo init</code>命令行，速度取决于网速，可能需要几分钟完成，成功后会在blog目录下生成相关文件，如图<br> <img src="/2018/01/23/Mac上搭建基于GitHhub的Hexo博客/blog相关文件目录.png" alt="初始化后生成的文件目录结构"></li>
<li>安装完成后运行 <code>hexo s</code> 现在即可在浏览器本地访问 <code>http://localhost:4000/</code> 会出现下图证明安装成功<br>  <img src="/2018/01/23/Mac上搭建基于GitHhub的Hexo博客/hexo.png" alt="初始化后生成的文件目录结构"></li>
</ul>
<h3 id="5-关联GitHub"><a href="#5-关联GitHub" class="headerlink" title="5. 关联GitHub"></a>5. 关联GitHub</h3><ul>
<li>终端 <code>open Documents/blog/</code> 打开刚才新建的blog文件夹就是我们把hexo init的那个文件夹。打开文件夹下 <code>_config.yml</code>文件,建议使用Sublime Text打开其他文本编辑器也行，滑到最下面修改成如下样子,将我的名字改成你的名字。<br>  <img src="/2018/01/23/Mac上搭建基于GitHhub的Hexo博客/关联github.png" alt="初始化后生成的文件目录结构"><br>  <code>注意：在配置所有的_config.yml文件时（包括theme中的）在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错</code></li>
<li>在blog文件夹目录下执行生成静态页面命令：<code>hexo g</code> 然后执行<code>hexo d</code><br>执行hexo d部署需要你的github用户名和密码</li>
</ul>
<h3 id="6-发布文章"><a href="#6-发布文章" class="headerlink" title="6. 发布文章"></a>6. 发布文章</h3><ul>
<li>终端cd到blog文件夹下运行 <code>hexo new “firstName”</code>名为firstName.md的文件会建在目录/blog/source/_posts下，firstName是文件名.建议使用Mou编辑器。如下图，新建title：为文章名称，date：创建时间，tags:文章所属标签，categories：文章所属分类，注意刚开始新建的文章打开是没有分类的需要修改新建文章模版，打开目录下scaffolds文件夹下的post.md文件在标签上面添加 <code>categories:</code>后续新建文章就会添加分类栏目。<br>  <img src="/2018/01/23/Mac上搭建基于GitHhub的Hexo博客/新建文章.png" alt="新建文章"><br>  如下图是这篇文章的属性，分类和标签可修改成任意名称，Hexo会自动根据标签和分类归纳文章。<br>  <img src="/2018/01/23/Mac上搭建基于GitHhub的Hexo博客/文章属性.png" alt="文章属性"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术杂记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[惯例]]></title>
      <url>/2018/01/18/index/</url>
      <content type="html"><![CDATA[<p>hello world</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
